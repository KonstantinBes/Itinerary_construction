1. "Places_spb_categories": changed the place of input -
    already saved file with database in .json
    
    """Parser API KudaGo."""
"""Several lists of places in Saint Petersburg divided by categories."""
"""Input: site`s API url. Output: several .json files with 'list' object:"""
"""[{'id':...,'name':...,...},...]"""
"""detailed information about places of the same category"""


from urllib.request import urlopen
from urllib.error import HTTPError
from bs4 import BeautifulSoup
import json


url_base="https://kudago.com/public-api/v1.4/places/"
max_in_file = 160    # Chosen empirically for .json file size<1mb



def get_data(url):
    try:
        html = urlopen(url)
        print(url)
    except HTTPError as e:
        return e
    try:
        data = json.loads(str(BeautifulSoup(html.read())))
    except AttributeError as e:
        return None
    return data


data=[]
with open ('A:\Information\Kostya\Master\Science\Places_spb_list.json',
           'r', encoding="utf-8") as inf:
    data=json.load(inf)
numb_in_file=1    #Distribute information if files by places category and quantity (file-size)
first_cat=''
last_cat=''
curr_file=[]
for obj in data:
    if(numb_in_file==1):
        first_cat=obj['categories'][0]
    elif(numb_in_file==max_in_file):
        last_cat=obj['categories'][0]
    elif(numb_in_file>max_in_file and last_cat!=obj['categories'][0]):    # File is complete. 
        with open ('A:\Information\Kostya\Master\Science\Pls_spb_'
                   +first_cat+'-'+last_cat+'.json', 'w', encoding="utf-8") as ouf:
            json.dump(curr_file, ouf)
            print('\n\n!!FILE!!\n\n')
        curr_file=[]
        first_cat=''
        last_cat=''
        numb_in_file=0
    curr_file.append(get_data(url_base+str(obj['id'])))
    print(numb_in_file, type(curr_file[-1]), curr_file[-1])
    numb_in_file+=1
if (first_cat!=''):    # Save the last bunch of places.
    with open ('A:\Information\Kostya\Master\Science\Pls_spb_'
                   +first_cat+'-'+last_cat+'.json', 'w', encoding="utf-8") as ouf:
        json.dump(curr_file, ouf)
    
"""with open ('A:\Information\Kostya\Master\Science\Places_spb_list.json',
           'w', encoding="utf-8") as ouf:
    while (page_data!=None): #
        page_data = get_data(url_full+str(page))
        if(type(page_data)!=str):
            break
        data=raw_data[raw_data.find('[')+1:-2:1].replace('},{','}\n{')        # for string representation
        for line in data.split('\n'):
            json.dump(json.loads(line), ouf)
        if page ==1:
            data=json.loads(page_data[page_data.find('['):-1:1])
        else:
            data+=json.loads(page_data[page_data.find('['):-1:1])
        page+=1
    json.dump(data, ouf)
    print(page)
"""
____________________________________________________________________________

2. "Places_spb_categories": changed the format of category,
    some categories rearranged in output .json
    
"""Parser API KudaGo."""
"""Several lists of places in Saint Petersburg divided by categories."""
"""Input: full base of places from KudaGo.com (saved as .json)."""
"""Output_1: list of all categories with quantity of places in each one"""
"""Output_2: .json file with list of places structured as:"""
"""[{'id':...,'name':...,'latitude':...,'longitude':...},{place_2},...]"""


import json


"""Load full base of places into 'data' """
places_base=[]
with open ('A:\Information\Kostya\Master\Science\Places_spb.json',
           'r', encoding="utf-8") as inf:
    places_base=json.load(inf)

"""Creating list of catigories, counting places in each one"""
categories = {}
for place in places_base:
    for cat in place['categories']:
        if(categories.get(cat) == None):
            categories[cat] = 1
        else:
            categories[cat] += 1
print(categories)
with open ('A:\Information\Kostya\Master\Science\\Places_categories'+'.json',
           'w', encoding="utf-8") as ouf:
    json.dump(categories, ouf)    

    
    
    
"""Manual control of result (look at the outer list)
with open ('A:\Information\Kostya\Master\Science\map_spb_categories'+'.json',
           'r', encoding="utf-8") as inf:
    out_list=json.load(inf)
    counter=0
    for obj in out_list:
        counter+=1
        if(counter%100==0):
            print(counter, obj)

out_list=[]    # List of places for mapping
for obj in data:
    #if(obj['categories'][0]==places_category):
    out_list+=[{'id':obj['id'], 'title': obj['title'], 'category': obj['categories'][0],
                'latitude': obj['coords']['lat'], 'longitude': obj['coords']['lon']}]
with open ('A:\Information\Kostya\Master\Science\map_spb_categories'+'.json',
           'w', encoding="utf-8") as ouf:
    json.dump(out_list, ouf) """   

"""Manual control of result (look at the outer list)"""
with open ('A:\Information\Kostya\Master\Science\map_spb_categories'+'.json',
           'r', encoding="utf-8") as inf:
    out_list=json.load(inf)
    counter=0
    for obj in out_list:
        counter+=1
        if(counter%100==0):
            print(counter, obj)

            
data=[]
with open ('A:\Information\Kostya\Master\Science\Places_spb_list.json',
           'r', encoding="utf-8") as inf:
    data=json.load(inf)
numb_in_file=1    #Distribute information if files by places category and quantity (file-size)
first_cat=''
last_cat=''
curr_file=[]
for obj in data:
    if(numb_in_file==1):
        first_cat=obj['categories'][0]
    elif(numb_in_file==max_in_file):
        last_cat=obj['categories'][0]
    elif(numb_in_file>max_in_file and last_cat!=obj['categories'][0]):    # File is complete. 
        with open ('A:\Information\Kostya\Master\Science\Pls_spb_'
                   +first_cat+'-'+last_cat+'.json', 'w', encoding="utf-8") as ouf:
            json.dump(curr_file, ouf)
            print('\n\n!!FILE!!\n\n')
        curr_file=[]
        first_cat=''
        last_cat=''
        numb_in_file=0
    curr_file.append(get_data(url_base+str(obj['id'])))
    print(numb_in_file, type(curr_file[-1]), curr_file[-1])
    numb_in_file+=1
if (first_cat!=''):    # Save the last bunch of places.
    with open ('A:\Information\Kostya\Master\Science\Pls_spb_'
                   +first_cat+'-'+last_cat+'.json', 'w', encoding="utf-8") as ouf:
        json.dump(curr_file, ouf)
    